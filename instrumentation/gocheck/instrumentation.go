package gocheck

import (
	"context"
	"reflect"
	"time"

	"github.com/opentracing/opentracing-go"

	"go.undefinedlabs.com/scopeagent/errors"
	"go.undefinedlabs.com/scopeagent/instrumentation"
	"go.undefinedlabs.com/scopeagent/instrumentation/logging"
	"go.undefinedlabs.com/scopeagent/reflection"
	"go.undefinedlabs.com/scopeagent/tags"

	chk "gopkg.in/check.v1"
)

type (
	Test struct {
		ctx    context.Context
		span   opentracing.Span
		method *methodType
		c      *chk.C
	}
)

func startTest(method *methodType, c *chk.C) *Test {
	test := &Test{
		method: method,
		c:      c,
	}

	_, _, testCode := instrumentation.GetPackageAndNameAndBoundaries(test.method.Info.Func.Pointer())
	t := method.Info.Type.In(0)
	if t.Kind() == reflect.Ptr {
		t = t.Elem()
	}
	pName := t.Name()

	testTags := opentracing.Tags{
		"span.kind":      "test",
		"test.name":      test.method.Info.Name,
		"test.suite":     pName,
		"test.framework": "gopkg.in/check.v1",
		"test.language":  "go",
	}

	if testCode != "" {
		testTags["test.code"] = testCode
	}

	if test.ctx == nil {
		test.ctx = context.Background()
	}

	span, ctx := opentracing.StartSpanFromContextWithTracer(test.ctx, instrumentation.Tracer(), test.method.Info.Name, testTags)
	span.SetBaggageItem("trace.kind", "test")
	test.span = span
	test.ctx = ctx

	return test
}
func (test *Test) end(c *chk.C) {
	finishTime := time.Now()

	// Stop and get records generated by loggers
	logRecords := logging.GetRecords()

	finishOptions := opentracing.FinishOptions{
		FinishTime: finishTime,
		LogRecords: logRecords,
	}

	if r := recover(); r != nil {
		test.span.SetTag("test.status", tags.TestStatus_FAIL)
		errors.WriteExceptionEvent(test.span, r, 1)
		test.span.FinishWithOptions(finishOptions)
		panic(r)
	}

	var status uint32
	if ptr, err := reflection.GetFieldPointerOf(c, "_status"); err == nil {
		status = *(*uint32)(ptr)
	}

	if status == 0 {
		test.span.SetTag("test.status", tags.TestStatus_PASS)
	} else if status == 1 {
		test.span.SetTag("test.status", tags.TestStatus_FAIL)
		test.span.SetTag("error", true)
	} else if status == 2 {
		test.span.SetTag("test.status", tags.TestStatus_SKIP)
	} else if status == 4 {
		test.span.SetTag("test.status", tags.TestStatus_FAIL)
		test.span.SetTag("error", true)
	} else if status == 5 {
		test.span.SetTag("test.status", tags.TestStatus_SKIP)
	}

	test.span.FinishWithOptions(finishOptions)
}
